{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Project BookStore - Simulation of a Data Warehouse\"\nauthor: \"Eloy Chang\"\ndate: \"February 19, 2017\"\noutput: html_document\n---\n\n# Abstract \n\nWe want to simulate a datawarehouse with all the information of a bookstore, the tables to simulate are:\n\n* Inventory (ProductID,BookID,AuthorID,Price)\n\n* Books (BookID,AuthorID,Rating, Price, UnitsBought, UnitsSold)\n\n* Authors (AuthorID,MaxRating,AvgRating,PublishedBooks,UnitsBought,UnitsSold)\n\n* Purchases (TransactionID, Price, ProductID)\n\n* Sales (TransactionID, ProductID, Price, EmployeeID)\n\n* Employees (EmployerID, Transactions, GeneratedProfit)\n\n# Diagram entity - relationship.\n\nThis diagram show how the tables are interconected between them\n\n![Figure 1 - diagram Entity/Relationship](C:\\Users\\stephanie\\Desktop\\Epsilon\\BookStore\\Part1\\Figures\\DER-BookStore-Part1.png)\n\nThis diagram was made with the free trial of [Lucidchart](www.lucidchart.com)\n\n# Simulation of tables\n\nNow we wil to simulate the data in this tables, here we must make a important decition, the order to simulate the tables, this change how the simulations will be, \n\nFisrt lets create the books table.\n\n```{r}\nGenBook<- function(NBooks=100, NAuthors = 20, BasePrice = 10){\n    BookID<- 1:NBooks\n    AuthorID<- round(runif(NBooks,min = 1, max = NAuthors))\n    Rating<- round(rbeta(NBooks,shape1 = 15,shape2 = 10)*5)\n    Price<- BasePrice + rgamma(NBooks,shape = BasePrice, scale = 2)\n    Price<- Price*(Rating*rnorm(NBooks,mean = 1, sd = 0.1))\n    UnitsBought<- round(rgamma(NBooks,shape = 10, scale = 1))*Rating\n    UnitsSold<- round(runif(NBooks)*UnitsBought)\n    return(data.frame(BookID,AuthorID,Rating,Price,UnitsBought,UnitsSold))\n}\nBooks<- GenBook()\nsummary(Books)\n```\n\nThe Author table have a direct dependence of the Books table.\n\n```{r}\nGenAuthor<- function(Books){\n    N<- max(Books$AuthorID)\n    AuthorID<- unique(Books$AuthorID)\n    MaxRating<- tapply(Books$Rating,Books$AuthorID,max)\n    AvgRating<- tapply(Books$Rating,Books$AuthorID,mean)\n    PublishedBooks<- tapply(Books$BookID,Books$AuthorID,length)\n    UnitsBought<- tapply(Books$UnitsBought,Books$AuthorID,sum)\n    UnitsSold<- tapply(Books$UnitsSold,Books$AuthorID,sum)\n    return(data.frame(AuthorID,MaxRating,AvgRating,PublishedBooks,UnitsBought,UnitsSold))\n}\nAuthor<- GenAuthor(Books)\nsummary(Author)\n```\n\nNow we are going to simulate the inventory table, this one have a dependece of how much of each book are given by UnitsBought and UnitsSold.\n\n```{r}\nGenInventory<- function(Books){\n    CopiesByBook<- Books$UnitsBought - Books$UnitsSold\n    ProductID<- numeric();BookID<- numeric();AuthorID<- numeric();Price<- numeric()\n    PID<- 1\n    for(Book in 1:nrow(Books)){\n        if(CopiesByBook[Book]==0){\n            next\n        }\n        ProductID<- c(ProductID,PID:(PID+CopiesByBook[Book]-1))\n        BookID<- c(BookID,rep(Book,CopiesByBook[Book]))\n        AuthorID<- c(AuthorID,rep(Books$AuthorID[Book], CopiesByBook[Book]))\n        Price<- c(Price,rep(Books$Price[Book], CopiesByBook[Book]))\n        PID<- PID + CopiesByBook[Book]\n    }\n    return(data.frame(ProductID,BookID,AuthorID,Price))\n}\nInventory<- GenInventory(Books)\nsummary(Inventory)\n```\n\nNow lets create the purchase and sales tables, we have one assumption for each table:\n\n* Purchases: All the copies of a same book were bought in just one transaction.\n\n* Sales: In each transaction a random number of book were sold.\n\n```{r}\nGenPurchases<- function(Books, Inventory, NEmployee=5){\n    TID<- 1\n    PID<- Inventory$ProductID[nrow(Inventory)] + 1\n    TransactionID<- numeric()\n    ProductID<- numeric()\n    EmployeeID<- numeric()\n    Price<- numeric()\n    rows<- 1\n    for(Book in 1:nrow(Books)){\n        entries<- rows:(rows + Books$UnitsBought[Book] - 1)\n        TransactionID[entries]<- TID\n        EmployeeID[entries]<- round(runif(1,min = 1,max = NEmployee))\n        Price[entries]<- Books$Price[Book]\n        aux<- Inventory$BookID==Books$BookID[Book]\n        if(Books$UnitsSold[Book]!=0){\n            ProductID[entries] <- c(Inventory$ProductID[aux],PID:(PID + Books$UnitsSold[Book] - 1))\n        }\n        else{\n            ProductID[entries] <- Inventory$ProductID[aux]\n        }\n        rows<- rows + Books$UnitsBought[Book]\n        TID<- TID + 1\n        PID<- PID + Books$UnitsSold[Book]\n    }\n    return(data.frame(TransactionID,ProductID,EmployeeID,Price))\n}\nPurchases<- GenPurchases(Books,Inventory)\nsummary(Purchases)\n```\n\n```{r}\nGenSales<- function(Books, Inventory, Purchases, ProfitRate = 0.1){\n    TID<- max(Purchases$TransactionID)\n    # Prueba\n}\n```\n\n\n\n",
    "created" : 1490408981020.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3119015342",
    "id" : "9AE55A65",
    "lastKnownWriteTime" : 1490408999,
    "last_content_update" : -2147483648,
    "path" : "~/Epsilon DL/Bookstore/Part1/EDL-ProjectBookStore-Part1.Rmd",
    "project_path" : "Part1/EDL-ProjectBookStore-Part1.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}